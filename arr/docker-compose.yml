###############################################################################
# Shared extension blocks
###############################################################################
x-arr-env: &arr-env
  PUID: ${PUID:-99}
  PGID: ${PGID:-100}
  TZ:  ${TZ:-Europe/Warsaw}

###############################################################################
# Network
###############################################################################
networks:
  traefik_proxy:
    external: true

services:
  gluetun:
    image: qmcgaw/gluetun:v3.40
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    env_file:
      - ./.env
    ports:
      - "8080:8080" # qbittorrent
      - "9999:9999/tcp"  # Health check server
    environment:
      TZ:                         ${TZ}
      # --- ProtonVPN / WireGuard ---
      VPN_SERVICE_PROVIDER:       protonvpn
      VPN_TYPE:                   wireguard
      WIREGUARD_PRIVATE_KEY:      ${WG_PRIVATE_KEY}
      WIREGUARD_PUBLIC_KEY:       ${WG_PUBLIC_KEY}
      WIREGUARD_ADDRESSES:        ${WG_ADDRESSES:-10.2.0.2/32}
      WIREGUARD_PERSISTENT_KEEPALIVE_INTERVAL: 15s
      # DNS configuration - improved for stability
      DNS_ADDRESS:                1.1.1.1
      # Server selection / features - more specific for stability
      SERVER_COUNTRIES:           Netherlands,Switzerland
      SERVER_FEATURES:            p2p
      # Connection stability parameters
      HEALTH_CHECK_TARGET:        1.1.1.1:443  # Use Cloudflare's reliable endpoint
      HEALTH_CHECK_SECONDS:       300  # Check every 5 minutes (increased from default)
      WIREGUARD_ENDPOINT_IP_REFRESH_SECONDS: 600  # Refresh endpoint IP less frequently
      # Port-forwarding
      VPN_PORT_FORWARDING:        "on"
      VPN_PORT_FORWARDING_PROVIDER: protonvpn
      VPN_PORT_FORWARD_ONLY:          "on"
      PORT_FORWARD_ONLY:          "on"
      # Misc
      LOG_LEVEL:                  info  # Changed from debug to reduce log volume
      DOT:                        off
      FIREWALL_DEBUG:             "off"  # Reduced logging
      HEALTH_SERVER_ADDRESS:      0.0.0.0:9999
      VPN_PORT_FORWARDING_UP_COMMAND: /bin/sh -c 'wget -O- --retry-connrefused --post-data "json={\"listen_port\":{{PORTS}}}" http://127.0.0.1:8080/api/v2/app/setPreferences 2>&1'
    volumes:
      - /mnt/user/appdata/gluetun:/gluetun
    restart: unless-stopped
    networks:
      - traefik_proxy
    labels:
      traefik.enable: "true"
      # qBittorrent
      traefik.http.routers.qbittorrent-secure.entrypoints:           websecure
      traefik.http.routers.qbittorrent-secure.rule:                  Host(`qbit.${DOMAIN_NAME}`)
      traefik.http.routers.qbittorrent-secure.tls:                   "true"
      traefik.http.routers.qbittorrent-secure.tls.certresolver:      letsencrypt
      traefik.http.routers.qbittorrent-secure.service:               qbittorrent-svc
      traefik.http.services.qbittorrent-svc.loadbalancer.server.port: "8080"
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy  # Wait for gluetun to be healthy
    environment:
      PUID:             ${PUID:-99}
      PGID:             ${PGID:-100}
      TZ:               ${TZ:-Europe/Warsaw}
      WEBUI_PORT:       8080
      WEBUI_USERNAME:   ${QB_USERNAME:-admin}
      WEBUI_PASSWORD:   ${QB_PASSWORD:-adminadmin}
      TORRENTING_PORT:  51413
    volumes:
      - /mnt/user/appdata/qbittorrent:/config
      - /mnt/user/media/downloads/qbittorrent:/downloads
      - ./qbittorrent-init/10-config.sh:/etc/cont-init.d/10-config.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v2/app/version"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    devices:
      - /dev/dri:/dev/dri
    environment:
      <<: *arr-env
      JELLYFIN_PublishedServerUrl: jellyfin.${DOMAIN_NAME}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - /mnt/user/appdata/jellyfin:/config
      - /mnt/user/media/movies:/data/movies
      - /mnt/user/media/tv:/data/tvshows
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "8096:8096"
    labels:
      traefik.enable: "true"
      traefik.http.routers.jellyfin-secure.entrypoints: websecure
      traefik.http.routers.jellyfin-secure.rule: Host(`jellyfin.${DOMAIN_NAME}`)
      traefik.http.routers.jellyfin-secure.tls: "true"
      traefik.http.routers.jellyfin-secure.tls.certresolver: letsencrypt
      traefik.http.routers.jellyfin-secure.service: jellyfin-svc
      traefik.http.services.jellyfin-svc.loadbalancer.server.port: "8096"
      traefik.http.middlewares.jellyfin-headers.headers.customResponseHeaders.X-Frame-Options: "SAMEORIGIN"
      traefik.http.routers.jellyfin-secure.middlewares: jellyfin-headers
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    ports:
      - "8989:8989"
    networks:
      - traefik_proxy
    volumes:
      - /mnt/user/appdata/sonarr:/config
      - /mnt/user/media/tv:/tv
      - /mnt/user/media/downloads/qbittorrent:/downloads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      traefik.enable: "true"
      traefik.http.routers.sonarr-secure.entrypoints: websecure
      traefik.http.routers.sonarr-secure.rule: Host(`sonarr.${DOMAIN_NAME}`)
      traefik.http.routers.sonarr-secure.tls: "true"
      traefik.http.routers.sonarr-secure.tls.certresolver: letsencrypt
      traefik.http.routers.sonarr-secure.service: sonarr-svc
      traefik.http.services.sonarr-svc.loadbalancer.server.port: "8989"
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    networks:
      - traefik_proxy
    ports:
      - "7878:7878"
    volumes:
      - /mnt/user/appdata/radarr:/config
      - /mnt/user/media/movies:/movies
      - /mnt/user/media/downloads/qbittorrent:/downloads
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.radarr-secure.entrypoints:                websecure
      traefik.http.routers.radarr-secure.rule:                       Host(`radarr.${DOMAIN_NAME}`)
      traefik.http.routers.radarr-secure.tls:                        "true"
      traefik.http.routers.radarr-secure.tls.certresolver:           letsencrypt
      traefik.http.routers.radarr-secure.service:                    radarr-svc
      traefik.http.services.radarr-svc.loadbalancer.server.port:     "7878"

  readarr:
    image: ghcr.io/hotio/readarr:latest
    container_name: readarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    ports:
      - "8787:8787"
    networks:
      - traefik_proxy
    volumes:
      - /mnt/user/appdata/readarr:/config
      - /mnt/user/media/books:/books
      - /mnt/user/media/downloads/qbittorrent:/downloads
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.readarr-secure.entrypoints:               websecure
      traefik.http.routers.readarr-secure.rule:                      Host(`readarr.${DOMAIN_NAME}`)
      traefik.http.routers.readarr-secure.tls:                       "true"
      traefik.http.routers.readarr-secure.tls.certresolver:          letsencrypt
      traefik.http.routers.readarr-secure.service:                   readarr-svc
      traefik.http.services.readarr-svc.loadbalancer.server.port:    "8787"
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    networks:
      - traefik_proxy
    ports:
      - "9696:9696"
    volumes:
      - /mnt/user/appdata/prowlarr:/config
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.prowlarr-secure.entrypoints:              websecure
      traefik.http.routers.prowlarr-secure.rule:                     Host(`prowlarr.${DOMAIN_NAME}`)
      traefik.http.routers.prowlarr-secure.tls:                      "true"
      traefik.http.routers.prowlarr-secure.tls.certresolver:         letsencrypt
      traefik.http.routers.prowlarr-secure.service:                  prowlarr-svc
      traefik.http.services.prowlarr-svc.loadbalancer.server.port:   "9696"
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    depends_on:
      gluetun:
        condition: service_healthy
    networks:
      - traefik_proxy
    ports:
      - "5055:5055"
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ:   ${TZ:-Europe/Warsaw}
    volumes:
      - /mnt/user/appdata/overseerr/config:/config
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.overseerr-secure.entrypoints:             websecure
      traefik.http.routers.overseerr-secure.rule:                    Host(`overseerr.${DOMAIN_NAME}`)
      traefik.http.routers.overseerr-secure.tls:                     "true"
      traefik.http.routers.overseerr-secure.tls.certresolver:        letsencrypt
      traefik.http.routers.overseerr-secure.service:                 overseerr-svc
      traefik.http.services.overseerr-svc.loadbalancer.server.port:  "5055"
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    networks:
      - traefik_proxy
    ports:
      - "6767:6767"
    volumes:
      - /mnt/user/appdata/bazarr:/config
      - /mnt/user/media/movies:/movies
      - /mnt/user/media/tv:/tv
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.bazarr-secure.entrypoints:                websecure
      traefik.http.routers.bazarr-secure.rule:                       Host(`bazarr.${DOMAIN_NAME}`)
      traefik.http.routers.bazarr-secure.tls:                        "true"
      traefik.http.routers.bazarr-secure.tls.certresolver:           letsencrypt
      traefik.http.routers.bazarr-secure.service:                    bazarr-svc
      traefik.http.services.bazarr-svc.loadbalancer.server.port:     "6767"
  # jellyfin-auto-collections:
  #   image: ghcr.io/ghomashudson/jellyfin-auto-collections:latest
  #   container_name: jellyfin-auto-collections
  #   network_mode: "service:gluetun"
  #   depends_on:
  #     gluetun:
  #       condition: service_healthy  # Wait for gluetun to be healthy
  #     jellyfin:
  #       condition: service_healthy  # Wait for jellyfin to be healthy
  #   environment:
  #     <<: *arr-env
  #     CRONTAB: 0 0 * * *
  #     TZ: America/New_York
  #     JELLYFIN_SERVER_URL: ${JELLYFIN_SERVER_URL}
  #     JELLYFIN_API_KEY: ${JELLYFIN_API_KEY}
  #     JELLYFIN_USER_ID: ${JELLYFIN_USER_ID}
  #   volumes:
  #     - /mnt/user/appdata/jellyfin-auto-collections/config:/app/config
  # Port updater service for ProtonVPN dynamic port forwarding
  network-health:
    image: alpine:3.19
    container_name: network-health
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy
      qbittorrent:
        condition: service_started
    env_file:
      - ./.env
    command: |
      sh -c "
        apk add --no-cache curl netcat-openbsd jq docker-cli-compose &&
        mkdir -p /logs &&

        # Function to log with timestamp
        log() {
          echo \"[\$(date '+%Y-%m-%d %H:%M:%S')] \$1\" | tee -a /logs/network-health.log
        }

        # Function to check if a service is healthy
        check_service() {
          local service=\$1
          local port=\$2
          local endpoint=\$3

          log \"[CHECK] \$service on port \$port...\"
          if curl -sf \$endpoint > /dev/null; then
            log \"[OK] \$service is healthy\"
            return 0
          else
            log \"[ERROR] \$service is unreachable\"
            return 1
          fi
        }

        # Function to check DNS resolution
        check_dns() {
          local domain=\$1
          log \"[CHECK] DNS resolution for \$domain...\"
          if nslookup \$domain > /dev/null 2>&1; then
            log \"[OK] DNS resolution for \$domain successful\"
            return 0
          else
            log \"[ERROR] DNS resolution for \$domain failed\"
            return 1
          fi
        }

        # Main monitoring loop
        while true; do
          # Check qBittorrent API
          check_service \"qBittorrent API\" 8080 \"http://localhost:8080/api/v2/app/version\"
          qbit_status=\$?

          # Check BitTorrent port
          BT_PORT=\${BT_PORT:-51413}
          log \"[CHECK] BitTorrent port \$BT_PORT...\"
          if nc -z -w5 localhost \$BT_PORT; then
            log \"[OK] Port \$BT_PORT is open\"
          else
            log \"[ERROR] Port \$BT_PORT is closed\"
          fi

          # Check forwarded port from file
          if [ -f \"/tmp/forwarded_port\" ]; then
            FORWARDED_PORT=\$(cat /tmp/forwarded_port)
            log \"[INFO] Current forwarded port: \$FORWARDED_PORT\"

            # Check if forwarded port is open
            if nc -z -w5 localhost \$FORWARDED_PORT; then
              log \"[OK] Forwarded port \$FORWARDED_PORT is open\"
            else
              log \"[WARNING] Forwarded port \$FORWARDED_PORT is closed\"
            fi
          else
            log \"[WARNING] No forwarded port file found\"
          fi

          # Check Gluetun health endpoint
          check_service \"Gluetun health\" 9999 \"http://localhost:9999/health\"
          gluetun_status=\$?

          # Check outbound connectivity
          log \"[CHECK] Public IP...\"
          if curl -sf https://api.ipify.org > /dev/null; then
            log \"[OK] Outbound connectivity is working\"
            outbound_status=0
          else
            log \"[ERROR] No outbound connectivity\"
            outbound_status=1
          fi

          # Check DNS resolution
          check_dns \"google.com\"
          dns_status=\$?

          # Check service endpoints
          check_service \"Sonarr\" 8989 \"http://localhost:8989/health\"
          sonarr_status=\$?

          check_service \"Radarr\" 7878 \"http://localhost:7878/health\"
          radarr_status=\$?

          check_service \"Prowlarr\" 9696 \"http://localhost:9696/health\"
          prowlarr_status=\$?

          # Log overall status
          log \"[STATUS] Services: qBittorrent=\$qbit_status, Gluetun=\$gluetun_status, Outbound=\$outbound_status, DNS=\$dns_status\"
          log \"[STATUS] Arr services: Sonarr=\$sonarr_status, Radarr=\$radarr_status, Prowlarr=\$prowlarr_status\"

          # If multiple services are down, there might be a VPN issue
          if [ \$outbound_status -eq 1 ] || [ \$dns_status -eq 1 ] || [ \$gluetun_status -eq 1 ]; then
            log \"[ALERT] Network connectivity issues detected - VPN might need restart\"
            # We can't restart services here as we don't have Docker access
            # But we can create a marker file that you can check
            echo \"\$(date '+%Y-%m-%d %H:%M:%S') - Network issues detected\" > /tmp/network_alert
          fi

          # Sleep for 3 minutes before next check
          log \"[INFO] Sleeping for 3 minutes...\"
          sleep 180
        done
      "
    volumes:
      - /mnt/user/appdata/network-health:/logs
    restart: unless-stopped
