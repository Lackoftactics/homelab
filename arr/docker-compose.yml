###############################################################################
# Shared extension blocks
###############################################################################
x-arr-env: &arr-env
  PUID: ${PUID:-99}
  PGID: ${PGID:-100}
  TZ:  ${TZ:-Europe/Warsaw}

# Common restart policy for auto-healing
x-restart-policy: &restart-policy
  restart: unless-stopped

# Common healthcheck for arr services
x-arr-healthcheck: &arr-healthcheck
  healthcheck:
    interval: 30s
    timeout: 5s
    retries: 3
    start_period: 30s

###############################################################################
# Network
###############################################################################
networks:
  # External network for Traefik and web interfaces
  traefik_proxy:
    external: true

  # Internal network for arr services to communicate with each other
  arr_internal:
    driver: bridge
    internal: true

  # VPN network for torrent traffic
  vpn_network:
    driver: bridge

services:
  gluetun:
    image: qmcgaw/gluetun:v3.40.0
    container_name: gluetun
    <<: *restart-policy
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    env_file:
      - ./.env
    ports:
      - "8080:8080" # qbittorrent
      - "9999:9999/tcp"  # Health check server
    environment:
      TZ:                         ${TZ}
      # --- ProtonVPN / WireGuard ---
      VPN_SERVICE_PROVIDER:       protonvpn
      VPN_TYPE:                   wireguard
      WIREGUARD_PRIVATE_KEY:      ${WG_PRIVATE_KEY}
      WIREGUARD_PUBLIC_KEY:       ${WG_PUBLIC_KEY}
      WIREGUARD_ADDRESSES:        ${WG_ADDRESSES:-10.2.0.2/32}
      # Improved stability settings
      WIREGUARD_PERSISTENT_KEEPALIVE_INTERVAL: 25s # Increased for better stability
      SERVER_COUNTRIES:           Netherlands,Switzerland
      SERVER_FEATURES:            p2p
      # Port-forwarding
      VPN_PORT_FORWARDING:        "on"
      VPN_PORT_FORWARDING_PROVIDER: protonvpn
      VPN_PORT_FORWARD_ONLY:      "on"
      PORT_FORWARD_ONLY:          "on"
      # Improved stability and reliability settings
      LOG_LEVEL:                  info
      VPN_PORT_FORWARDING_UP_COMMAND: /bin/sh -c 'wget -O- --retry-connrefused --wait=5 --tries=10 --post-data "json={\"listen_port\":{{PORTS}}}" http://127.0.0.1:8080/api/v2/app/setPreferences 2>&1'
      UPDATER_PERIOD:             24h
    volumes:
      - /mnt/user/appdata/gluetun:/gluetun
    networks:
      - traefik_proxy
      - vpn_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      traefik.enable: "true"
      # qBittorrent
      traefik.http.routers.qbittorrent-secure.entrypoints:           websecure
      traefik.http.routers.qbittorrent-secure.rule:                  Host(`qbit.${DOMAIN_NAME}`)
      traefik.http.routers.qbittorrent-secure.tls:                   "true"
      traefik.http.routers.qbittorrent-secure.tls.certresolver:      letsencrypt
      traefik.http.routers.qbittorrent-secure.service:               qbittorrent-svc
      traefik.http.services.qbittorrent-svc.loadbalancer.server.port: "8080"
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy  # Wait for gluetun to be healthy
    environment:
      PUID:             ${PUID:-99}
      PGID:             ${PGID:-100}
      TZ:               ${TZ:-Europe/Warsaw}
      WEBUI_PORT:       8080
      WEBUI_USERNAME:   ${QB_USERNAME:-admin}
      WEBUI_PASSWORD:   ${QB_PASSWORD:-adminadmin}
      TORRENTING_PORT:  51413
      BIND_TO_INTERFACE: tun0  # Bind qBittorrent to the VPN interface
    volumes:
      - /mnt/user/appdata/qbittorrent:/config
      - /mnt/user/media/downloads/qbittorrent:/downloads
      - ./qbittorrent-init/10-config.sh:/etc/cont-init.d/10-config.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:8080/api/v2/app/version && ping -c1 1.1.1.1"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    devices:
      - /dev/dri:/dev/dri
    environment:
      <<: *arr-env
      JELLYFIN_PublishedServerUrl: jellyfin.${DOMAIN_NAME}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - /mnt/user/appdata/jellyfin:/config
      - /mnt/user/media/movies:/data/movies
      - /mnt/user/media/tv:/data/tvshows
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "8096:8096"
    labels:
      traefik.enable: "true"
      traefik.http.routers.jellyfin-secure.entrypoints: websecure
      traefik.http.routers.jellyfin-secure.rule: Host(`jellyfin.${DOMAIN_NAME}`)
      traefik.http.routers.jellyfin-secure.tls: "true"
      traefik.http.routers.jellyfin-secure.tls.certresolver: letsencrypt
      traefik.http.routers.jellyfin-secure.service: jellyfin-svc
      traefik.http.services.jellyfin-svc.loadbalancer.server.port: "8096"
      traefik.http.middlewares.jellyfin-headers.headers.customResponseHeaders.X-Frame-Options: "SAMEORIGIN"
      traefik.http.routers.jellyfin-secure.middlewares: jellyfin-headers
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    ports:
      - "8989:8989"
    networks:
      - traefik_proxy
    volumes:
      - /mnt/user/appdata/sonarr:/config
      - /mnt/user/media/tv:/tv
      - /mnt/user/media/downloads/qbittorrent:/downloads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      traefik.enable: "true"
      traefik.http.routers.sonarr-secure.entrypoints: websecure
      traefik.http.routers.sonarr-secure.rule: Host(`sonarr.${DOMAIN_NAME}`)
      traefik.http.routers.sonarr-secure.tls: "true"
      traefik.http.routers.sonarr-secure.tls.certresolver: letsencrypt
      traefik.http.routers.sonarr-secure.service: sonarr-svc
      traefik.http.services.sonarr-svc.loadbalancer.server.port: "8989"
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    networks:
      - traefik_proxy
    ports:
      - "7878:7878"
    volumes:
      - /mnt/user/appdata/radarr:/config
      - /mnt/user/media/movies:/movies
      - /mnt/user/media/downloads/qbittorrent:/downloads
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.radarr-secure.entrypoints:                websecure
      traefik.http.routers.radarr-secure.rule:                       Host(`radarr.${DOMAIN_NAME}`)
      traefik.http.routers.radarr-secure.tls:                        "true"
      traefik.http.routers.radarr-secure.tls.certresolver:           letsencrypt
      traefik.http.routers.radarr-secure.service:                    radarr-svc
      traefik.http.services.radarr-svc.loadbalancer.server.port:     "7878"

  readarr:
    image: ghcr.io/hotio/readarr:latest
    container_name: readarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    ports:
      - "8787:8787"
    networks:
      - traefik_proxy
    volumes:
      - /mnt/user/appdata/readarr:/config
      - /mnt/user/media/books:/books
      - /mnt/user/media/downloads/qbittorrent:/downloads
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.readarr-secure.entrypoints:               websecure
      traefik.http.routers.readarr-secure.rule:                      Host(`readarr.${DOMAIN_NAME}`)
      traefik.http.routers.readarr-secure.tls:                       "true"
      traefik.http.routers.readarr-secure.tls.certresolver:          letsencrypt
      traefik.http.routers.readarr-secure.service:                   readarr-svc
      traefik.http.services.readarr-svc.loadbalancer.server.port:    "8787"
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    networks:
      - traefik_proxy
    ports:
      - "9696:9696"
    volumes:
      - /mnt/user/appdata/prowlarr:/config
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.prowlarr-secure.entrypoints:              websecure
      traefik.http.routers.prowlarr-secure.rule:                     Host(`prowlarr.${DOMAIN_NAME}`)
      traefik.http.routers.prowlarr-secure.tls:                      "true"
      traefik.http.routers.prowlarr-secure.tls.certresolver:         letsencrypt
      traefik.http.routers.prowlarr-secure.service:                  prowlarr-svc
      traefik.http.services.prowlarr-svc.loadbalancer.server.port:   "9696"
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    depends_on:
      gluetun:
        condition: service_healthy
    networks:
      - traefik_proxy
    ports:
      - "5055:5055"
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ:   ${TZ:-Europe/Warsaw}
    volumes:
      - /mnt/user/appdata/overseerr/config:/config
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.overseerr-secure.entrypoints:             websecure
      traefik.http.routers.overseerr-secure.rule:                    Host(`overseerr.${DOMAIN_NAME}`)
      traefik.http.routers.overseerr-secure.tls:                     "true"
      traefik.http.routers.overseerr-secure.tls.certresolver:        letsencrypt
      traefik.http.routers.overseerr-secure.service:                 overseerr-svc
      traefik.http.services.overseerr-svc.loadbalancer.server.port:  "5055"
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    depends_on:
      gluetun:
        condition: service_healthy
    environment: *arr-env
    networks:
      - traefik_proxy
    ports:
      - "6767:6767"
    volumes:
      - /mnt/user/appdata/bazarr:/config
      - /mnt/user/media/movies:/movies
      - /mnt/user/media/tv:/tv
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.bazarr-secure.entrypoints:                websecure
      traefik.http.routers.bazarr-secure.rule:                       Host(`bazarr.${DOMAIN_NAME}`)
      traefik.http.routers.bazarr-secure.tls:                        "true"
      traefik.http.routers.bazarr-secure.tls.certresolver:           letsencrypt
      traefik.http.routers.bazarr-secure.service:                    bazarr-svc
      traefik.http.services.bazarr-svc.loadbalancer.server.port:     "6767"
  lingarr:
    image: lingarr/lingarr:latest
    container_name: lingarr
    depends_on:
      gluetun:
        condition: service_healthy
    restart: unless-stopped
    environment: *arr-env
    ports:
      - "9876:9876"
    volumes:
      - /mnt/user/media/movies:/movies
      - /mnt/user/media/tv:/tv
      - /mnt/user/appdata/lingarr:/app/config
    networks:
      - traefik_proxy
    labels:
      traefik.enable: "true"
      traefik.http.routers.lingarr-secure.entrypoints:               websecure
      traefik.http.routers.lingarr-secure.rule:                      Host(`lingarr.${DOMAIN_NAME}`)
      traefik.http.routers.lingarr-secure.tls:                       "true"
      traefik.http.routers.lingarr-secure.tls.certresolver:          letsencrypt
      traefik.http.routers.lingarr-secure.service:                   lingarr-svc
      traefik.http.services.lingarr-svc.loadbalancer.server.port:    "9876"
  # jellyfin-auto-collections:
  #   image: ghcr.io/ghomashudson/jellyfin-auto-collections:latest
  #   container_name: jellyfin-auto-collections
  #   network_mode: "service:gluetun"
  #   depends_on:
  #     gluetun:
  #       condition: service_healthy  # Wait for gluetun to be healthy
  #     jellyfin:
  #       condition: service_healthy  # Wait for jellyfin to be healthy
  #   environment:
  #     <<: *arr-env
  #     CRONTAB: 0 0 * * *
  #     TZ: America/New_York
  #     JELLYFIN_SERVER_URL: ${JELLYFIN_SERVER_URL}
  #     JELLYFIN_API_KEY: ${JELLYFIN_API_KEY}
  #     JELLYFIN_USER_ID: ${JELLYFIN_USER_ID}
  #   volumes:
  #     - /mnt/user/appdata/jellyfin-auto-collections/config:/app/config
  # Removed redundant network-health container as its functionality
  # is now covered by the more comprehensive vpn-monitor container

  # Auto-healing container for the entire stack
  auto-heal:
    image: willfarrell/autoheal:latest
    container_name: auto-heal
    <<: *restart-policy
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
      AUTOHEAL_INTERVAL: 60
      AUTOHEAL_START_PERIOD: 300
      AUTOHEAL_DEFAULT_STOP_TIMEOUT: 30
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - arr_internal

  # VPN connection monitor and auto-healer
  vpn-monitor:
    build: ./vpn-monitor
    container_name: vpn-monitor
    <<: *restart-policy
    depends_on:
      gluetun:
        condition: service_healthy
      qbittorrent:
        condition: service_started
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/user/appdata/vpn-monitor:/var/log
    networks:
      - vpn_network
      - arr_internal
    # Add privileged mode to ensure Docker socket access works properly
    privileged: true
