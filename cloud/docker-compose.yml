version: '3.8'

networks:
  traefik_proxy:
    external: true
  cloud_internal:
    driver: bridge
    internal: false

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: nextcloud-postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${PAPERLESS_DB_NAME},${BOOKSTACK_DB_NAME}
      TZ: ${TZ:-Europe/Warsaw}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
    volumes:
      - /mnt/user/appdata/nextcloud/postgres:/var/lib/postgresql/data
      - ./postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - cloud_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nextcloud-redis
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      TZ: ${TZ:-Europe/Warsaw}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
    volumes:
      - /mnt/user/appdata/nextcloud/redis:/data
    networks:
      - cloud_internal
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Nextcloud Application
  nextcloud:
    image: nextcloud:29-fpm-alpine
    container_name: nextcloud-app
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_HOST_PASSWORD: ${REDIS_PASSWORD}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_TRUSTED_DOMAINS}
      OVERWRITEPROTOCOL: https
      OVERWRITECLIURL: https://nextcloud.${DOMAIN_NAME}
      OVERWRITEHOST: nextcloud.${DOMAIN_NAME}
      TZ: ${TZ:-Europe/Warsaw}
      PHP_MEMORY_LIMIT: 1G
      PHP_UPLOAD_LIMIT: 10G
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
    volumes:
      - /mnt/user/appdata/nextcloud/data:/var/www/html
      - ./nextcloud/php.ini:/usr/local/etc/php/conf.d/nextcloud.ini:ro
    networks:
      - cloud_internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "php", "-f", "/var/www/html/occ", "status"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: nextcloud-nginx
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      TZ: ${TZ:-Europe/Warsaw}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
    volumes:
      - /mnt/user/appdata/nextcloud/data:/var/www/html:ro
      - ./nginx/nextcloud.conf:/etc/nginx/nginx.conf:ro
    networks:
      - cloud_internal
      - traefik_proxy
    depends_on:
      nextcloud:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.${DOMAIN_NAME}`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls=true"
      - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-headers@docker"
      - "traefik.http.middlewares.nextcloud-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.nextcloud-headers.headers.customRequestHeaders.X-Forwarded-Host=nextcloud.${DOMAIN_NAME}"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsPreload=true"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/status.php"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Paperless-ngx Document Management
  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_DBHOST: postgres
      PAPERLESS_DBNAME: ${PAPERLESS_DB_NAME}
      PAPERLESS_DBUSER: ${POSTGRES_USER}
      PAPERLESS_DBPASS: ${POSTGRES_PASSWORD}
      PAPERLESS_DBPORT: 5432
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY}
      PAPERLESS_URL: https://paperless.${DOMAIN_NAME}
      PAPERLESS_ADMIN_USER: ${PAPERLESS_ADMIN_USER}
      PAPERLESS_ADMIN_PASSWORD: ${PAPERLESS_ADMIN_PASSWORD}
      PAPERLESS_TIME_ZONE: ${TZ:-Europe/Warsaw}
      PAPERLESS_OCR_LANGUAGE: eng+pol
      PAPERLESS_CONSUMER_POLLING: 30
      PAPERLESS_CONSUMER_RECURSIVE: true
      PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: true
      USERMAP_UID: ${PUID:-1000}
      USERMAP_GID: ${PGID:-1000}
    volumes:
      - /mnt/user/appdata/paperless/data:/usr/src/paperless/data
      - /mnt/user/appdata/paperless/media:/usr/src/paperless/media
      - /mnt/user/appdata/paperless/consume:/usr/src/paperless/consume
    networks:
      - cloud_internal
      - traefik_proxy
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.paperless.rule=Host(`paperless.${DOMAIN_NAME}`)"
      - "traefik.http.routers.paperless.entrypoints=websecure"
      - "traefik.http.routers.paperless.tls=true"
      - "traefik.http.routers.paperless.tls.certresolver=letsencrypt"
      - "traefik.http.services.paperless.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # BookStack Knowledge Base
  bookstack:
    image: lscr.io/linuxserver/bookstack:latest
    container_name: bookstack
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-Europe/Warsaw}
      APP_URL: https://bookstack.${DOMAIN_NAME}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${BOOKSTACK_DB_NAME}
    volumes:
      - /mnt/user/appdata/bookstack/data:/config
    networks:
      - cloud_internal
      - traefik_proxy
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bookstack.rule=Host(`bookstack.${DOMAIN_NAME}`)"
      - "traefik.http.routers.bookstack.entrypoints=websecure"
      - "traefik.http.routers.bookstack.tls=true"
      - "traefik.http.routers.bookstack.tls.certresolver=letsencrypt"
      - "traefik.http.services.bookstack.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/login"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
